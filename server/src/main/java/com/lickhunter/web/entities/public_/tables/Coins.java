/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables;


import com.lickhunter.web.entities.public_.Indexes;
import com.lickhunter.web.entities.public_.Keys;
import com.lickhunter.web.entities.public_.Public;
import com.lickhunter.web.entities.public_.tables.records.CoinsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coins extends TableImpl<CoinsRecord> {

    private static final long serialVersionUID = -1682955445;

    /**
     * The reference instance of <code>PUBLIC.COINS</code>
     */
    public static final Coins COINS = new Coins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoinsRecord> getRecordType() {
        return CoinsRecord.class;
    }

    /**
     * The column <code>PUBLIC.COINS.SYMBOL</code>.
     */
    public final TableField<CoinsRecord, String> SYMBOL = createField(DSL.name("SYMBOL"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.COINS.LONG_OFFSET</code>.
     */
    public final TableField<CoinsRecord, Double> LONG_OFFSET = createField(DSL.name("LONG_OFFSET"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.COINS.SHORT_OFFSET</code>.
     */
    public final TableField<CoinsRecord, Double> SHORT_OFFSET = createField(DSL.name("SHORT_OFFSET"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.COINS.LICK_VALUE</code>.
     */
    public final TableField<CoinsRecord, Double> LICK_VALUE = createField(DSL.name("LICK_VALUE"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>PUBLIC.COINS</code> table reference
     */
    public Coins() {
        this(DSL.name("COINS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.COINS</code> table reference
     */
    public Coins(String alias) {
        this(DSL.name(alias), COINS);
    }

    /**
     * Create an aliased <code>PUBLIC.COINS</code> table reference
     */
    public Coins(Name alias) {
        this(alias, COINS);
    }

    private Coins(Name alias, Table<CoinsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coins(Name alias, Table<CoinsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Coins(Table<O> child, ForeignKey<O, CoinsRecord> key) {
        super(child, key, COINS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_3D);
    }

    @Override
    public UniqueKey<CoinsRecord> getPrimaryKey() {
        return Keys.PK_COINS;
    }

    @Override
    public List<UniqueKey<CoinsRecord>> getKeys() {
        return Arrays.<UniqueKey<CoinsRecord>>asList(Keys.PK_COINS);
    }

    @Override
    public Coins as(String alias) {
        return new Coins(DSL.name(alias), this);
    }

    @Override
    public Coins as(Name alias) {
        return new Coins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coins rename(String name) {
        return new Coins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coins rename(Name name) {
        return new Coins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Double, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
