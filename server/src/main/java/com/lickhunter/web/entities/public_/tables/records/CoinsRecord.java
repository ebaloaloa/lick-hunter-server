/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables.records;


import com.lickhunter.web.entities.public_.tables.Coins;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoinsRecord extends UpdatableRecordImpl<CoinsRecord> implements Record4<String, Double, Double, Double> {

    private static final long serialVersionUID = 319946931;

    /**
     * Setter for <code>PUBLIC.COINS.SYMBOL</code>.
     */
    public void setSymbol(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.COINS.SYMBOL</code>.
     */
    public String getSymbol() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.COINS.LONG_OFFSET</code>.
     */
    public void setLongOffset(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.COINS.LONG_OFFSET</code>.
     */
    public Double getLongOffset() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>PUBLIC.COINS.SHORT_OFFSET</code>.
     */
    public void setShortOffset(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.COINS.SHORT_OFFSET</code>.
     */
    public Double getShortOffset() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>PUBLIC.COINS.LICK_VALUE</code>.
     */
    public void setLickValue(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.COINS.LICK_VALUE</code>.
     */
    public Double getLickValue() {
        return (Double) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Double, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, Double, Double, Double> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Coins.COINS.SYMBOL;
    }

    @Override
    public Field<Double> field2() {
        return Coins.COINS.LONG_OFFSET;
    }

    @Override
    public Field<Double> field3() {
        return Coins.COINS.SHORT_OFFSET;
    }

    @Override
    public Field<Double> field4() {
        return Coins.COINS.LICK_VALUE;
    }

    @Override
    public String component1() {
        return getSymbol();
    }

    @Override
    public Double component2() {
        return getLongOffset();
    }

    @Override
    public Double component3() {
        return getShortOffset();
    }

    @Override
    public Double component4() {
        return getLickValue();
    }

    @Override
    public String value1() {
        return getSymbol();
    }

    @Override
    public Double value2() {
        return getLongOffset();
    }

    @Override
    public Double value3() {
        return getShortOffset();
    }

    @Override
    public Double value4() {
        return getLickValue();
    }

    @Override
    public CoinsRecord value1(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public CoinsRecord value2(Double value) {
        setLongOffset(value);
        return this;
    }

    @Override
    public CoinsRecord value3(Double value) {
        setShortOffset(value);
        return this;
    }

    @Override
    public CoinsRecord value4(Double value) {
        setLickValue(value);
        return this;
    }

    @Override
    public CoinsRecord values(String value1, Double value2, Double value3, Double value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CoinsRecord
     */
    public CoinsRecord() {
        super(Coins.COINS);
    }

    /**
     * Create a detached, initialised CoinsRecord
     */
    public CoinsRecord(String symbol, Double longOffset, Double shortOffset, Double lickValue) {
        super(Coins.COINS);

        set(0, symbol);
        set(1, longOffset);
        set(2, shortOffset);
        set(3, lickValue);
    }
}
