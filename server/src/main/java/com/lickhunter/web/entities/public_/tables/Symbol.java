/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables;


import com.lickhunter.web.entities.public_.Indexes;
import com.lickhunter.web.entities.public_.Keys;
import com.lickhunter.web.entities.public_.Public;
import com.lickhunter.web.entities.public_.tables.records.SymbolRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Symbol extends TableImpl<SymbolRecord> {

    private static final long serialVersionUID = 37470488;

    /**
     * The reference instance of <code>PUBLIC.SYMBOL</code>
     */
    public static final Symbol SYMBOL = new Symbol();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SymbolRecord> getRecordType() {
        return SymbolRecord.class;
    }

    /**
     * The column <code>PUBLIC.SYMBOL.SYMBOL</code>.
     */
    public final TableField<SymbolRecord, String> SYMBOL_ = createField(DSL.name("SYMBOL"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.SYMBOL.MARK_PRICE</code>.
     */
    public final TableField<SymbolRecord, Double> MARK_PRICE = createField(DSL.name("MARK_PRICE"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.SYMBOL.LAST_FUNDING_RATE</code>.
     */
    public final TableField<SymbolRecord, Double> LAST_FUNDING_RATE = createField(DSL.name("LAST_FUNDING_RATE"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.SYMBOL.NEXT_FUNDING_TIME</code>.
     */
    public final TableField<SymbolRecord, Double> NEXT_FUNDING_TIME = createField(DSL.name("NEXT_FUNDING_TIME"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.SYMBOL.TIME</code>.
     */
    public final TableField<SymbolRecord, Long> TIME = createField(DSL.name("TIME"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>PUBLIC.SYMBOL</code> table reference
     */
    public Symbol() {
        this(DSL.name("SYMBOL"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.SYMBOL</code> table reference
     */
    public Symbol(String alias) {
        this(DSL.name(alias), SYMBOL);
    }

    /**
     * Create an aliased <code>PUBLIC.SYMBOL</code> table reference
     */
    public Symbol(Name alias) {
        this(alias, SYMBOL);
    }

    private Symbol(Name alias, Table<SymbolRecord> aliased) {
        this(alias, aliased, null);
    }

    private Symbol(Name alias, Table<SymbolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Symbol(Table<O> child, ForeignKey<O, SymbolRecord> key) {
        super(child, key, SYMBOL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_9);
    }

    @Override
    public UniqueKey<SymbolRecord> getPrimaryKey() {
        return Keys.PK_SYMBOL;
    }

    @Override
    public List<UniqueKey<SymbolRecord>> getKeys() {
        return Arrays.<UniqueKey<SymbolRecord>>asList(Keys.PK_SYMBOL);
    }

    @Override
    public Symbol as(String alias) {
        return new Symbol(DSL.name(alias), this);
    }

    @Override
    public Symbol as(Name alias) {
        return new Symbol(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(String name) {
        return new Symbol(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symbol rename(Name name) {
        return new Symbol(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Double, Double, Double, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
