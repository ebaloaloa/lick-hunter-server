/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables;


import com.lickhunter.web.entities.public_.Indexes;
import com.lickhunter.web.entities.public_.Keys;
import com.lickhunter.web.entities.public_.Public;
import com.lickhunter.web.entities.public_.tables.records.CandlestickRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Candlestick extends TableImpl<CandlestickRecord> {

    private static final long serialVersionUID = -953002652;

    /**
     * The reference instance of <code>PUBLIC.CANDLESTICK</code>
     */
    public static final Candlestick CANDLESTICK = new Candlestick();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CandlestickRecord> getRecordType() {
        return CandlestickRecord.class;
    }

    /**
     * The column <code>PUBLIC.CANDLESTICK.ID</code>.
     */
    public final TableField<CandlestickRecord, Integer> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.SYMBOL</code>.
     */
    public final TableField<CandlestickRecord, String> SYMBOL = createField(DSL.name("SYMBOL"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.OPEN_TIME</code>.
     */
    public final TableField<CandlestickRecord, Long> OPEN_TIME = createField(DSL.name("OPEN_TIME"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.OPEN</code>.
     */
    public final TableField<CandlestickRecord, Double> OPEN = createField(DSL.name("OPEN"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.HIGH</code>.
     */
    public final TableField<CandlestickRecord, Double> HIGH = createField(DSL.name("HIGH"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.LOW</code>.
     */
    public final TableField<CandlestickRecord, Double> LOW = createField(DSL.name("LOW"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.CLOSE</code>.
     */
    public final TableField<CandlestickRecord, Double> CLOSE = createField(DSL.name("CLOSE"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.VOLUME</code>.
     */
    public final TableField<CandlestickRecord, Double> VOLUME = createField(DSL.name("VOLUME"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.CLOSE_TIME</code>.
     */
    public final TableField<CandlestickRecord, Long> CLOSE_TIME = createField(DSL.name("CLOSE_TIME"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.QUOTE_ASSET_VOLUME</code>.
     */
    public final TableField<CandlestickRecord, Double> QUOTE_ASSET_VOLUME = createField(DSL.name("QUOTE_ASSET_VOLUME"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.NUMBER_OF_TRADES</code>.
     */
    public final TableField<CandlestickRecord, Integer> NUMBER_OF_TRADES = createField(DSL.name("NUMBER_OF_TRADES"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.TAKER_BUY_BASE_VOLUME</code>.
     */
    public final TableField<CandlestickRecord, Double> TAKER_BUY_BASE_VOLUME = createField(DSL.name("TAKER_BUY_BASE_VOLUME"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CANDLESTICK.TAKER_BUY_QUOTE_VOLUME</code>.
     */
    public final TableField<CandlestickRecord, Double> TAKER_BUY_QUOTE_VOLUME = createField(DSL.name("TAKER_BUY_QUOTE_VOLUME"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.CANDLESTICK</code> table reference
     */
    public Candlestick() {
        this(DSL.name("CANDLESTICK"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CANDLESTICK</code> table reference
     */
    public Candlestick(String alias) {
        this(DSL.name(alias), CANDLESTICK);
    }

    /**
     * Create an aliased <code>PUBLIC.CANDLESTICK</code> table reference
     */
    public Candlestick(Name alias) {
        this(alias, CANDLESTICK);
    }

    private Candlestick(Name alias, Table<CandlestickRecord> aliased) {
        this(alias, aliased, null);
    }

    private Candlestick(Name alias, Table<CandlestickRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Candlestick(Table<O> child, ForeignKey<O, CandlestickRecord> key) {
        super(child, key, CANDLESTICK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_CANDLESTICK_SYMBOL, Indexes.PRIMARY_KEY_F);
    }

    @Override
    public Identity<CandlestickRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CANDLESTICK;
    }

    @Override
    public UniqueKey<CandlestickRecord> getPrimaryKey() {
        return Keys.PK_CANDLESTICK;
    }

    @Override
    public List<UniqueKey<CandlestickRecord>> getKeys() {
        return Arrays.<UniqueKey<CandlestickRecord>>asList(Keys.PK_CANDLESTICK);
    }

    @Override
    public Candlestick as(String alias) {
        return new Candlestick(DSL.name(alias), this);
    }

    @Override
    public Candlestick as(Name alias) {
        return new Candlestick(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Candlestick rename(String name) {
        return new Candlestick(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Candlestick rename(Name name) {
        return new Candlestick(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, Long, Double, Double, Double, Double, Double, Long, Double, Integer, Double, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
