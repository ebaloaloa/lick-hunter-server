/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables.records;


import com.lickhunter.web.entities.public_.tables.Candlestick;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record13;
import org.jooq.Row13;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CandlestickRecord extends UpdatableRecordImpl<CandlestickRecord> implements Record13<Integer, String, Long, Double, Double, Double, Double, Double, Long, Double, Integer, Double, Double> {

    private static final long serialVersionUID = 2027969846;

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.SYMBOL</code>.
     */
    public void setSymbol(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.SYMBOL</code>.
     */
    public String getSymbol() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.OPEN_TIME</code>.
     */
    public void setOpenTime(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.OPEN_TIME</code>.
     */
    public Long getOpenTime() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.OPEN</code>.
     */
    public void setOpen(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.OPEN</code>.
     */
    public Double getOpen() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.HIGH</code>.
     */
    public void setHigh(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.HIGH</code>.
     */
    public Double getHigh() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.LOW</code>.
     */
    public void setLow(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.LOW</code>.
     */
    public Double getLow() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.CLOSE</code>.
     */
    public void setClose(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.CLOSE</code>.
     */
    public Double getClose() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.VOLUME</code>.
     */
    public void setVolume(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.VOLUME</code>.
     */
    public Double getVolume() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.CLOSE_TIME</code>.
     */
    public void setCloseTime(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.CLOSE_TIME</code>.
     */
    public Long getCloseTime() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.QUOTE_ASSET_VOLUME</code>.
     */
    public void setQuoteAssetVolume(Double value) {
        set(9, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.QUOTE_ASSET_VOLUME</code>.
     */
    public Double getQuoteAssetVolume() {
        return (Double) get(9);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.NUMBER_OF_TRADES</code>.
     */
    public void setNumberOfTrades(Integer value) {
        set(10, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.NUMBER_OF_TRADES</code>.
     */
    public Integer getNumberOfTrades() {
        return (Integer) get(10);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.TAKER_BUY_BASE_VOLUME</code>.
     */
    public void setTakerBuyBaseVolume(Double value) {
        set(11, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.TAKER_BUY_BASE_VOLUME</code>.
     */
    public Double getTakerBuyBaseVolume() {
        return (Double) get(11);
    }

    /**
     * Setter for <code>PUBLIC.CANDLESTICK.TAKER_BUY_QUOTE_VOLUME</code>.
     */
    public void setTakerBuyQuoteVolume(Double value) {
        set(12, value);
    }

    /**
     * Getter for <code>PUBLIC.CANDLESTICK.TAKER_BUY_QUOTE_VOLUME</code>.
     */
    public Double getTakerBuyQuoteVolume() {
        return (Double) get(12);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record13 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, Long, Double, Double, Double, Double, Double, Long, Double, Integer, Double, Double> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    @Override
    public Row13<Integer, String, Long, Double, Double, Double, Double, Double, Long, Double, Integer, Double, Double> valuesRow() {
        return (Row13) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Candlestick.CANDLESTICK.ID;
    }

    @Override
    public Field<String> field2() {
        return Candlestick.CANDLESTICK.SYMBOL;
    }

    @Override
    public Field<Long> field3() {
        return Candlestick.CANDLESTICK.OPEN_TIME;
    }

    @Override
    public Field<Double> field4() {
        return Candlestick.CANDLESTICK.OPEN;
    }

    @Override
    public Field<Double> field5() {
        return Candlestick.CANDLESTICK.HIGH;
    }

    @Override
    public Field<Double> field6() {
        return Candlestick.CANDLESTICK.LOW;
    }

    @Override
    public Field<Double> field7() {
        return Candlestick.CANDLESTICK.CLOSE;
    }

    @Override
    public Field<Double> field8() {
        return Candlestick.CANDLESTICK.VOLUME;
    }

    @Override
    public Field<Long> field9() {
        return Candlestick.CANDLESTICK.CLOSE_TIME;
    }

    @Override
    public Field<Double> field10() {
        return Candlestick.CANDLESTICK.QUOTE_ASSET_VOLUME;
    }

    @Override
    public Field<Integer> field11() {
        return Candlestick.CANDLESTICK.NUMBER_OF_TRADES;
    }

    @Override
    public Field<Double> field12() {
        return Candlestick.CANDLESTICK.TAKER_BUY_BASE_VOLUME;
    }

    @Override
    public Field<Double> field13() {
        return Candlestick.CANDLESTICK.TAKER_BUY_QUOTE_VOLUME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getSymbol();
    }

    @Override
    public Long component3() {
        return getOpenTime();
    }

    @Override
    public Double component4() {
        return getOpen();
    }

    @Override
    public Double component5() {
        return getHigh();
    }

    @Override
    public Double component6() {
        return getLow();
    }

    @Override
    public Double component7() {
        return getClose();
    }

    @Override
    public Double component8() {
        return getVolume();
    }

    @Override
    public Long component9() {
        return getCloseTime();
    }

    @Override
    public Double component10() {
        return getQuoteAssetVolume();
    }

    @Override
    public Integer component11() {
        return getNumberOfTrades();
    }

    @Override
    public Double component12() {
        return getTakerBuyBaseVolume();
    }

    @Override
    public Double component13() {
        return getTakerBuyQuoteVolume();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getSymbol();
    }

    @Override
    public Long value3() {
        return getOpenTime();
    }

    @Override
    public Double value4() {
        return getOpen();
    }

    @Override
    public Double value5() {
        return getHigh();
    }

    @Override
    public Double value6() {
        return getLow();
    }

    @Override
    public Double value7() {
        return getClose();
    }

    @Override
    public Double value8() {
        return getVolume();
    }

    @Override
    public Long value9() {
        return getCloseTime();
    }

    @Override
    public Double value10() {
        return getQuoteAssetVolume();
    }

    @Override
    public Integer value11() {
        return getNumberOfTrades();
    }

    @Override
    public Double value12() {
        return getTakerBuyBaseVolume();
    }

    @Override
    public Double value13() {
        return getTakerBuyQuoteVolume();
    }

    @Override
    public CandlestickRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CandlestickRecord value2(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public CandlestickRecord value3(Long value) {
        setOpenTime(value);
        return this;
    }

    @Override
    public CandlestickRecord value4(Double value) {
        setOpen(value);
        return this;
    }

    @Override
    public CandlestickRecord value5(Double value) {
        setHigh(value);
        return this;
    }

    @Override
    public CandlestickRecord value6(Double value) {
        setLow(value);
        return this;
    }

    @Override
    public CandlestickRecord value7(Double value) {
        setClose(value);
        return this;
    }

    @Override
    public CandlestickRecord value8(Double value) {
        setVolume(value);
        return this;
    }

    @Override
    public CandlestickRecord value9(Long value) {
        setCloseTime(value);
        return this;
    }

    @Override
    public CandlestickRecord value10(Double value) {
        setQuoteAssetVolume(value);
        return this;
    }

    @Override
    public CandlestickRecord value11(Integer value) {
        setNumberOfTrades(value);
        return this;
    }

    @Override
    public CandlestickRecord value12(Double value) {
        setTakerBuyBaseVolume(value);
        return this;
    }

    @Override
    public CandlestickRecord value13(Double value) {
        setTakerBuyQuoteVolume(value);
        return this;
    }

    @Override
    public CandlestickRecord values(Integer value1, String value2, Long value3, Double value4, Double value5, Double value6, Double value7, Double value8, Long value9, Double value10, Integer value11, Double value12, Double value13) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CandlestickRecord
     */
    public CandlestickRecord() {
        super(Candlestick.CANDLESTICK);
    }

    /**
     * Create a detached, initialised CandlestickRecord
     */
    public CandlestickRecord(Integer id, String symbol, Long openTime, Double open, Double high, Double low, Double close, Double volume, Long closeTime, Double quoteAssetVolume, Integer numberOfTrades, Double takerBuyBaseVolume, Double takerBuyQuoteVolume) {
        super(Candlestick.CANDLESTICK);

        set(0, id);
        set(1, symbol);
        set(2, openTime);
        set(3, open);
        set(4, high);
        set(5, low);
        set(6, close);
        set(7, volume);
        set(8, closeTime);
        set(9, quoteAssetVolume);
        set(10, numberOfTrades);
        set(11, takerBuyBaseVolume);
        set(12, takerBuyQuoteVolume);
    }
}
