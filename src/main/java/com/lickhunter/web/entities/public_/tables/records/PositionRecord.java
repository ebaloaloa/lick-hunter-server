/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables.records;


import com.lickhunter.web.entities.public_.tables.Position;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PositionRecord extends UpdatableRecordImpl<PositionRecord> implements Record12<Boolean, Double, Double, Double, Double, Double, String, Double, String, String, String, String> {

    private static final long serialVersionUID = 1795238877;

    /**
     * Setter for <code>PUBLIC.POSITION.ISOLATED</code>.
     */
    public void setIsolated(Boolean value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.ISOLATED</code>.
     */
    public Boolean getIsolated() {
        return (Boolean) get(0);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.LEVERAGE</code>.
     */
    public void setLeverage(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.LEVERAGE</code>.
     */
    public Double getLeverage() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.INITIAL_MARGIN</code>.
     */
    public void setInitialMargin(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.INITIAL_MARGIN</code>.
     */
    public Double getInitialMargin() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.MAINT_MARGIN</code>.
     */
    public void setMaintMargin(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.MAINT_MARGIN</code>.
     */
    public Double getMaintMargin() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.OPEN_ORDER_INITIAL_MARGIN</code>.
     */
    public void setOpenOrderInitialMargin(Double value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.OPEN_ORDER_INITIAL_MARGIN</code>.
     */
    public Double getOpenOrderInitialMargin() {
        return (Double) get(4);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.POSITION_INITIAL_MARGIN</code>.
     */
    public void setPositionInitialMargin(Double value) {
        set(5, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.POSITION_INITIAL_MARGIN</code>.
     */
    public Double getPositionInitialMargin() {
        return (Double) get(5);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.SYMBOL</code>.
     */
    public void setSymbol(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.SYMBOL</code>.
     */
    public String getSymbol() {
        return (String) get(6);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.UNREALIZED_PROFIT</code>.
     */
    public void setUnrealizedProfit(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.UNREALIZED_PROFIT</code>.
     */
    public Double getUnrealizedProfit() {
        return (Double) get(7);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.ENTRY_PRICE</code>.
     */
    public void setEntryPrice(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.ENTRY_PRICE</code>.
     */
    public String getEntryPrice() {
        return (String) get(8);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.MAX_NOTIONAL</code>.
     */
    public void setMaxNotional(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.MAX_NOTIONAL</code>.
     */
    public String getMaxNotional() {
        return (String) get(9);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.POSITION_SIDE</code>.
     */
    public void setPositionSide(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.POSITION_SIDE</code>.
     */
    public String getPositionSide() {
        return (String) get(10);
    }

    /**
     * Setter for <code>PUBLIC.POSITION.ACCOUNT_ID</code>.
     */
    public void setAccountId(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>PUBLIC.POSITION.ACCOUNT_ID</code>.
     */
    public String getAccountId() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Boolean, Double, Double, Double, Double, Double, String, Double, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Boolean, Double, Double, Double, Double, Double, String, Double, String, String, String, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Boolean> field1() {
        return Position.POSITION.ISOLATED;
    }

    @Override
    public Field<Double> field2() {
        return Position.POSITION.LEVERAGE;
    }

    @Override
    public Field<Double> field3() {
        return Position.POSITION.INITIAL_MARGIN;
    }

    @Override
    public Field<Double> field4() {
        return Position.POSITION.MAINT_MARGIN;
    }

    @Override
    public Field<Double> field5() {
        return Position.POSITION.OPEN_ORDER_INITIAL_MARGIN;
    }

    @Override
    public Field<Double> field6() {
        return Position.POSITION.POSITION_INITIAL_MARGIN;
    }

    @Override
    public Field<String> field7() {
        return Position.POSITION.SYMBOL;
    }

    @Override
    public Field<Double> field8() {
        return Position.POSITION.UNREALIZED_PROFIT;
    }

    @Override
    public Field<String> field9() {
        return Position.POSITION.ENTRY_PRICE;
    }

    @Override
    public Field<String> field10() {
        return Position.POSITION.MAX_NOTIONAL;
    }

    @Override
    public Field<String> field11() {
        return Position.POSITION.POSITION_SIDE;
    }

    @Override
    public Field<String> field12() {
        return Position.POSITION.ACCOUNT_ID;
    }

    @Override
    public Boolean component1() {
        return getIsolated();
    }

    @Override
    public Double component2() {
        return getLeverage();
    }

    @Override
    public Double component3() {
        return getInitialMargin();
    }

    @Override
    public Double component4() {
        return getMaintMargin();
    }

    @Override
    public Double component5() {
        return getOpenOrderInitialMargin();
    }

    @Override
    public Double component6() {
        return getPositionInitialMargin();
    }

    @Override
    public String component7() {
        return getSymbol();
    }

    @Override
    public Double component8() {
        return getUnrealizedProfit();
    }

    @Override
    public String component9() {
        return getEntryPrice();
    }

    @Override
    public String component10() {
        return getMaxNotional();
    }

    @Override
    public String component11() {
        return getPositionSide();
    }

    @Override
    public String component12() {
        return getAccountId();
    }

    @Override
    public Boolean value1() {
        return getIsolated();
    }

    @Override
    public Double value2() {
        return getLeverage();
    }

    @Override
    public Double value3() {
        return getInitialMargin();
    }

    @Override
    public Double value4() {
        return getMaintMargin();
    }

    @Override
    public Double value5() {
        return getOpenOrderInitialMargin();
    }

    @Override
    public Double value6() {
        return getPositionInitialMargin();
    }

    @Override
    public String value7() {
        return getSymbol();
    }

    @Override
    public Double value8() {
        return getUnrealizedProfit();
    }

    @Override
    public String value9() {
        return getEntryPrice();
    }

    @Override
    public String value10() {
        return getMaxNotional();
    }

    @Override
    public String value11() {
        return getPositionSide();
    }

    @Override
    public String value12() {
        return getAccountId();
    }

    @Override
    public PositionRecord value1(Boolean value) {
        setIsolated(value);
        return this;
    }

    @Override
    public PositionRecord value2(Double value) {
        setLeverage(value);
        return this;
    }

    @Override
    public PositionRecord value3(Double value) {
        setInitialMargin(value);
        return this;
    }

    @Override
    public PositionRecord value4(Double value) {
        setMaintMargin(value);
        return this;
    }

    @Override
    public PositionRecord value5(Double value) {
        setOpenOrderInitialMargin(value);
        return this;
    }

    @Override
    public PositionRecord value6(Double value) {
        setPositionInitialMargin(value);
        return this;
    }

    @Override
    public PositionRecord value7(String value) {
        setSymbol(value);
        return this;
    }

    @Override
    public PositionRecord value8(Double value) {
        setUnrealizedProfit(value);
        return this;
    }

    @Override
    public PositionRecord value9(String value) {
        setEntryPrice(value);
        return this;
    }

    @Override
    public PositionRecord value10(String value) {
        setMaxNotional(value);
        return this;
    }

    @Override
    public PositionRecord value11(String value) {
        setPositionSide(value);
        return this;
    }

    @Override
    public PositionRecord value12(String value) {
        setAccountId(value);
        return this;
    }

    @Override
    public PositionRecord values(Boolean value1, Double value2, Double value3, Double value4, Double value5, Double value6, String value7, Double value8, String value9, String value10, String value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PositionRecord
     */
    public PositionRecord() {
        super(Position.POSITION);
    }

    /**
     * Create a detached, initialised PositionRecord
     */
    public PositionRecord(Boolean isolated, Double leverage, Double initialMargin, Double maintMargin, Double openOrderInitialMargin, Double positionInitialMargin, String symbol, Double unrealizedProfit, String entryPrice, String maxNotional, String positionSide, String accountId) {
        super(Position.POSITION);

        set(0, isolated);
        set(1, leverage);
        set(2, initialMargin);
        set(3, maintMargin);
        set(4, openOrderInitialMargin);
        set(5, positionInitialMargin);
        set(6, symbol);
        set(7, unrealizedProfit);
        set(8, entryPrice);
        set(9, maxNotional);
        set(10, positionSide);
        set(11, accountId);
    }
}
