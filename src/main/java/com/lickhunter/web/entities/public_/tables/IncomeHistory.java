/*
 * This file is generated by jOOQ.
 */
package com.lickhunter.web.entities.public_.tables;


import com.lickhunter.web.entities.public_.Indexes;
import com.lickhunter.web.entities.public_.Keys;
import com.lickhunter.web.entities.public_.Public;
import com.lickhunter.web.entities.public_.tables.records.IncomeHistoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IncomeHistory extends TableImpl<IncomeHistoryRecord> {

    private static final long serialVersionUID = -750723112;

    /**
     * The reference instance of <code>PUBLIC.INCOME_HISTORY</code>
     */
    public static final IncomeHistory INCOME_HISTORY = new IncomeHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IncomeHistoryRecord> getRecordType() {
        return IncomeHistoryRecord.class;
    }

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.ID</code>.
     */
    public final TableField<IncomeHistoryRecord, Long> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.TRX_ID</code>.
     */
    public final TableField<IncomeHistoryRecord, Double> TRX_ID = createField(DSL.name("TRX_ID"), org.jooq.impl.SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.SYMBOL</code>.
     */
    public final TableField<IncomeHistoryRecord, String> SYMBOL = createField(DSL.name("SYMBOL"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.INCOME_TYPE</code>.
     */
    public final TableField<IncomeHistoryRecord, String> INCOME_TYPE = createField(DSL.name("INCOME_TYPE"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.INCOME</code>.
     */
    public final TableField<IncomeHistoryRecord, Double> INCOME = createField(DSL.name("INCOME"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.ASSET</code>.
     */
    public final TableField<IncomeHistoryRecord, String> ASSET = createField(DSL.name("ASSET"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.TIME</code>.
     */
    public final TableField<IncomeHistoryRecord, Double> TIME = createField(DSL.name("TIME"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>PUBLIC.INCOME_HISTORY.ACCOUNT_ID</code>.
     */
    public final TableField<IncomeHistoryRecord, String> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.INCOME_HISTORY</code> table reference
     */
    public IncomeHistory() {
        this(DSL.name("INCOME_HISTORY"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.INCOME_HISTORY</code> table reference
     */
    public IncomeHistory(String alias) {
        this(DSL.name(alias), INCOME_HISTORY);
    }

    /**
     * Create an aliased <code>PUBLIC.INCOME_HISTORY</code> table reference
     */
    public IncomeHistory(Name alias) {
        this(alias, INCOME_HISTORY);
    }

    private IncomeHistory(Name alias, Table<IncomeHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private IncomeHistory(Name alias, Table<IncomeHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> IncomeHistory(Table<O> child, ForeignKey<O, IncomeHistoryRecord> key) {
        super(child, key, INCOME_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_INCOME_HISTORY_INCOME_TYPE, Indexes.IDX_INCOME_HISTORY_SYMBOL, Indexes.IDX_INCOME_HISTORY_TRX_ID, Indexes.PRIMARY_KEY_6);
    }

    @Override
    public Identity<IncomeHistoryRecord, Long> getIdentity() {
        return Keys.IDENTITY_INCOME_HISTORY;
    }

    @Override
    public UniqueKey<IncomeHistoryRecord> getPrimaryKey() {
        return Keys.PK_INCOME_HISTORY;
    }

    @Override
    public List<UniqueKey<IncomeHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<IncomeHistoryRecord>>asList(Keys.PK_INCOME_HISTORY);
    }

    @Override
    public IncomeHistory as(String alias) {
        return new IncomeHistory(DSL.name(alias), this);
    }

    @Override
    public IncomeHistory as(Name alias) {
        return new IncomeHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IncomeHistory rename(String name) {
        return new IncomeHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IncomeHistory rename(Name name) {
        return new IncomeHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Double, String, String, Double, String, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
